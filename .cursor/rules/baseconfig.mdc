---
description: JAXgarden tutorial chapter detailing BaseConfig, the base dataclass for managing model hyperparameters and configurations.
globs: 
alwaysApply: false
---
# Chapter 3: BaseConfig

In the [previous chapter](basemodel.mdc), we explored `BaseModel`, the foundational class for models in `jaxgarden`. We saw that each `BaseModel` instance is initialized with a configuration object. This chapter dives into the base class for those configuration objects: `BaseConfig`.

**Motivation:** Neural models are complex systems with numerous hyperparameters (like hidden size, number of layers, dropout rates) and settings (like data types, precision). Managing these configurations consistently across different models is crucial for reproducibility, maintainability, and ease of use. Using simple dictionaries or ad-hoc parameter passing can quickly become messy and error-prone. `BaseConfig` provides a standardized, structured way to define, manage, and serialize these configurations.

**Central Use Case:** Defining the set of hyperparameters for a new model implementation (e.g., creating a `MyTransformerConfig` that inherits from `BaseConfig`) or inspecting and modifying the configuration of an existing `jaxgarden` model like [LlamaForCausalLM](llamaforcausallm.mdc), which uses its own `LlamaConfig` subclass derived from `BaseConfig`.

## Key Concepts

`BaseConfig` leverages Python's `dataclasses` to provide a simple yet powerful configuration system:

1.  **Dataclass Structure:** It's defined using the `@dataclass` decorator, offering type hints, default values, and automatic `__init__` generation.
2.  **Inheritance:** Model-specific configurations (e.g., `LlamaConfig`, `ModernBERTConfig`) inherit from `BaseConfig`, adding their unique parameters while retaining the common base attributes.
3.  **Common Attributes:** Provides essential base attributes applicable to most models, such as `seed` for reproducibility and `log_level` for controlling verbosity.
4.  **Extensibility:** An `extra` dictionary allows storing arbitrary additional parameters not explicitly defined in the dataclass fields, offering flexibility.
5.  **Serialization:** The `to_dict()` method converts the configuration object into a standard Python dictionary, useful for logging, saving, or inspection.
6.  **Programmatic Updates:** The `update()` method allows modifying configuration attributes after instantiation using keyword arguments.

## Using `BaseConfig`

You typically interact with subclasses of `BaseConfig` tailored to specific models.

### Defining a Custom Configuration

To define a configuration for a new model, create a class inheriting from `BaseConfig` and use the `@dataclass` decorator. Add fields for your model's specific hyperparameters.

```python
from dataclasses import dataclass, field
from jaxgarden.models.base import BaseConfig
from typing import Any

@dataclass
class MyModelConfig(BaseConfig):
    """Configuration for MyCustomModel."""
    hidden_size: int = 256
    num_layers: int = 4
    dropout_rate: float = 0.1
    activation_fn: str = "relu"
    # Override a base attribute default if needed
    seed: int = 123

# Instantiate the configuration
my_config = MyModelConfig(hidden_size=512) # Override default hidden_size

print(f"MyModelConfig instance: {my_config}")
# Output: MyModelConfig instance: MyModelConfig(seed=123, log_level='info', extra={}, hidden_size=512, num_layers=4, dropout_rate=0.1, activation_fn='relu')

print(f"Hidden size: {my_config.hidden_size}")
# Output: Hidden size: 512
print(f"Seed (overridden): {my_config.seed}")
# Output: Seed (overridden): 123
print(f"Log Level (from base): {my_config.log_level}")
# Output: Log Level (from base): info
```

**Explanation:**
- We define `MyModelConfig` inheriting from `BaseConfig`.
- `@dataclass` automatically generates methods like `__init__`.
- We add model-specific fields like `hidden_size` and `num_layers` with type hints and default values.
- We can override defaults during instantiation (`hidden_size=512`).
- Base attributes like `seed` and `log_level` are inherited.

### Serialization (`to_dict`)

Convert the configuration object to a dictionary for easy inspection or storage.

```python
config_dict = my_config.to_dict()
print(f"Configuration as dictionary: {config_dict}")
# Output: Configuration as dictionary: {'seed': 123, 'log_level': 'info', 'extra': {}, 'hidden_size': 512, 'num_layers': 4, 'dropout_rate': 0.1, 'activation_fn': 'relu'}

import json
print(f"Configuration as JSON: {json.dumps(config_dict, indent=2)}")
# Output:
# Configuration as JSON: {
#  "seed": 123,
#  "log_level": "info",
#  "extra": {},
#  "hidden_size": 512,
#  "num_layers": 4,
#  "dropout_rate": 0.1,
#  "activation_fn": "relu"
# }
```

**Explanation:** The `to_dict()` method simply returns the internal `__dict__` of the dataclass instance, making it compatible with standard serialization libraries like `json`.

### Programmatic Updates (`update`)

Modify configuration values after the object has been created.

```python
print(f"Original dropout rate: {my_config.dropout_rate}")
# Output: Original dropout rate: 0.1
print(f"Original extra dict: {my_config.extra}")
# Output: Original extra dict: {}


# Update existing attributes and add new ones to 'extra'
update_params = {
    "dropout_rate": 0.15,
    "new_experimental_param": True,
    "learning_rate": 1e-4
}
my_config.update(**update_params)

print(f"Updated dropout rate: {my_config.dropout_rate}")
# Output: Updated dropout rate: 0.15
print(f"Updated extra dict: {my_config.extra}")
# Output: Updated extra dict: {'new_experimental_param': True, 'learning_rate': 0.0001}
```

**Explanation:** The `update()` method iterates through the provided keyword arguments. If an argument name matches an existing attribute of the config object, it updates that attribute. If the name doesn't match any defined attribute, it's added to the `extra` dictionary.

## Internal Implementation

`BaseConfig` is fundamentally a Python `dataclass` with a couple of added helper methods.

*   **Location:** `jaxgarden/models/base.py`

*   **Definition:**
    ```python
    # From jaxgarden/models/base.py
    from dataclasses import dataclass, field
    from typing import Any

    @dataclass
    class BaseConfig:
        """Base configuration for models."""
        seed: int = 42
        log_level: str = "info"
        extra: dict[str, Any] = field(default_factory=dict)
        # ... (Subclasses add more fields here)

        def to_dict(self) -> dict[str, Any]:
            # Simply returns the instance's dictionary
            return self.__dict__

        def update(self, **kwargs: dict) -> None:
            # Iterates through provided keyword arguments
            for k, v in kwargs.items():
                if hasattr(self, k):
                    # If attribute exists, set its value
                    setattr(self, k, v)
                else:
                    # Otherwise, add it to the 'extra' dictionary
                    self.extra[k] = v
    ```
*   **Mechanism:**
    1.  `@dataclass`: Handles the `__init__`, `__repr__`, `__eq__`, etc., automatically based on the defined fields and type hints.
    2.  `field(default_factory=dict)`: Ensures that each instance gets its own empty `extra` dictionary by default, preventing accidental sharing between instances.
    3.  `to_dict()`: Leverages the standard Python object attribute `__dict__` for a direct conversion to a dictionary.
    4.  `update()`: Uses Python's reflection capabilities (`hasattr`, `setattr`) to dynamically update attributes or populate the `extra` dictionary.

## Relationship with `BaseModel`

As discussed in [Chapter 2: BaseModel](basemodel.mdc), every `BaseModel` instance requires a configuration object (a subclass of `BaseConfig`) during initialization. This `config` object is stored as an attribute (`self.config`) within the model instance, making the model's hyperparameters readily accessible.

```python
# Conceptual reminder from BaseModel chapter
# class MyModel(BaseModel):
#     def __init__(self, config: MyModelConfig, *, rngs):
#         super().__init__(config, rngs=rngs) # Pass config to BaseModel
#         # Access config later: self.config.hidden_size
#         self.layer = nnx.Linear(config.hidden_size, ...)

# my_config = MyModelConfig()
# model = MyModel(config=my_config, ...)
# print(model.config.num_layers) # Accessing config via the model
```

## Conclusion

`BaseConfig` provides a clean, structured, and extensible foundation for managing model configurations in `jaxgarden`. By using Python dataclasses and offering simple methods for serialization (`to_dict`) and updates (`update`), it promotes consistency and simplifies the process of defining and working with model hyperparameters. All specific model configurations, like the one we'll see next for Llama, build upon this base.

**Next:** [LlamaForCausalLM](llamaforcausallm.mdc)


---

Generated by [Rules for AI](https://github.com/altaidevorg/rules-for-ai)